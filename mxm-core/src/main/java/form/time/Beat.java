package form.time;

import org.jetbrains.annotations.NotNull;
import util.fraction.ReducedFraction;

public final class Beat implements Comparable<Beat> {

    ////////////////////////////////////////////////////////////////////////////////////////////////
    //  Static variables                                                                          //
    ////////////////////////////////////////////////////////////////////////////////////////////////

    public static final Beat ZERO = Beat.of(0,1);
    public static final Beat ONE = Beat.of(1,1);

    ////////////////////////////////////////////////////////////////////////////////////////////////
    //  Static methods                                                                            //
    ////////////////////////////////////////////////////////////////////////////////////////////////

    public static Beat of(int num, int den) {
        return new Beat(num,den);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    //  Member variables                                                                          //
    ////////////////////////////////////////////////////////////////////////////////////////////////

    private final ReducedFraction fraction;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    //  Instance methods                                                                          //
    ////////////////////////////////////////////////////////////////////////////////////////////////

    private Beat(int num, int den) {
        this.fraction = ReducedFraction.of(num,den);
    }

    public final @NotNull String toString() {
        return "b " + fraction;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    //  Package-private methods                                                                   //
    ////////////////////////////////////////////////////////////////////////////////////////////////

    final @NotNull ReducedFraction getFraction() {
        return fraction;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    //  Override methods                                                                          //
    ////////////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public final int compareTo(@NotNull Beat other) {
        return this.fraction.compareTo(other.fraction);
    }
    @Override
    public final boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Beat beat = (Beat) o;
        return this.fraction.equals(beat.fraction);
    }
}